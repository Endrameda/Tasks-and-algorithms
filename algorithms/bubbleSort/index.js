/**
 *
 * Алгоритм шариковой сортировки, не самая эффективная сортировка. Можно использовать если массти не очень большой
 * */
let arr = Array(100).fill(null).map(() => Math.floor(Math.random() * 2000) - 1000)

/*let arr = [
    762, -397, 771, 890, 112, -183, -550, 18, 760, 79, 107,
    498, -890, 57, -320, -762, -718, 965, -210, -908, 991, 476,
    -235, 10, 914, -820, 182, -980, 108, -646, 289, -658, -86,
    -869, 692, -823, -310, 396, 451, 58, -632, -543, 481, -502,
    -793, 210, 537, -995, 784, -257, 346, 893, -674, 979, 675,
    -282, 342, 137, -16, -912, -178, 118, -207, 209, -349, 876,
    -387, 805, 977, 657, 219, 279, -746, 476, 121, -186, 834,
    337, 727, -907, 782, -60, 394, -133, 45, 624, -249, -324,
    735, 3, 57, 456, 60, -817, -634, 483, 669, 794, -493,
    -385
]*/
console.log(bubbleSort(arr))

function bubbleSort(array) {
    /**
     * Проходимся по всем элементам массива, цыкл объертка нужна для того чтобы была возможность
     * через переменную n исключать из внутреннего цикла последние индексы массива который идет сортировка
     * */
    for (let n = 0; n < array.length; n++) {
        /**
         * Этот цыкл уже проверяет текущий индекс и след. индекс, если текущих больше чем след. то он меняет их местами
         * */
        for (let i = 0; i < array.length - 1 + n; i++) {
            if (array[i] > array[i + 1]) {
                const buffer = array[i]

                array[i] = array[i + 1]
                array[i + 1] = buffer
            }
        }
    }

    return array
}
